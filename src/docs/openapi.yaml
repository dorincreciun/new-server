# -- START openapi.clean.yaml --
openapi: 3.0.3
info:
  title: Pizza Shop API
  version: 2.0.0
  description: >
    API pentru magazinul de pizza. Autentificarea se face prin cookie HTTP-Only setat de server la /auth/login.
    Clientul (React) trebuie să trimită toate requesturile autentificate cu credentials: 'include'.

    Include categorii de pizza, produse cu ingrediente și variante, filtrare avansată și taxonomii pentru client.
    Toate endpoint-urile administrative au fost eliminate - doar funcționalități pentru client.
servers:
  - url: http://localhost:3000
components:
  schemas:
    UserDTO:
      type: object
      required: [id, email]
      properties:
        id: { type: integer, example: 1 }
        email: { type: string, format: email, example: user@example.com }
        name: { type: string, example: Ion Popescu }
    AuthResponse:
      type: object
      description: >
        Răspunsul nu conține tokenul deoarece este setat în cookie HTTP-Only la login.
        Clientul trebuie să trimită cererile ulterioare cu credentials: 'include'.
      properties:
        user:
          $ref: '#/components/schemas/UserDTO'
    LogoutResponse:
      type: object
      properties:
        message: { type: string, example: Logged out }
    AuthRegisterRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string, minLength: 6 }
        name: { type: string }
      example:
        email: user@example.com
        password: secret123
        name: Ion
    AuthLoginRequest:
      type: object
      required: [email, password]
      properties:
        email: { type: string, format: email }
        password: { type: string }
      example:
        email: user@example.com
        password: secret123
    ErrorResponse:
      type: object
      properties:
        error: { type: string, example: Eroare de validare }
        details:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              message: { type: string }
    Category:
      type: object
      required: [name]
      properties:
        id: { type: integer, example: 1 }
        slug: { type: string, example: pizza-clasice }
        name: { type: string, example: Pizza Clasice }
        description: { type: string, example: Pizza tradiționale cu rețete clasice italiene }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
    # Taxonomies
    Ingredient:
      type: object
      required: [key]
      properties:
        key: { type: string, example: mozzarella }
        label: { type: string, example: Mozzarella }
    Flag:
      type: object
      required: [key]
      properties:
        key: { type: string, example: vegetarian }
        label: { type: string, example: Vegetarian }
    DoughType:
      type: object
      required: [key]
      properties:
        key: { type: string, example: clasic }
        label: { type: string, example: Aluat Clasic }
    SizeOption:
      type: object
      required: [key]
      properties:
        key: { type: string, example: medie }
        label: { type: string, example: Medie (30cm) }
    # Product core (prod-ready, sincronizat cu variante)
    Product:
      type: object
      required: [name, basePrice]
      properties:
        id: { type: integer, example: 1 }
        name: { type: string, example: Pizza Margherita }
        description: { type: string, example: Pizza clasică italiană cu sos de roșii, mozzarella și busuioc proaspăt }
        basePrice: { type: number, format: double, example: 25.00 }
        minPrice: { type: number, format: double, example: 20.00 }
        maxPrice: { type: number, format: double, example: 35.00 }
        imageUrl: { type: string, example: https://cdn.example.com/pizzas/margherita.jpg }
        popularity: { type: integer, example: 95 }
        ratingAverage: { type: number, format: double, example: 4.8 }
        ratingCount: { type: integer, example: 150 }
        isCustomizable: { type: boolean, example: true }
        releasedAt: { type: string, format: date-time }
        createdAt: { type: string, format: date-time }
        updatedAt: { type: string, format: date-time }
        category:
          type: object
          properties:
            id: { type: integer, example: 1 }
            name: { type: string, example: Pizza Clasice }
            slug: { type: string, example: pizza-clasice }
    ProductWithRelations:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            flags:
              type: array
              items: { $ref: '#/components/schemas/Flag' }
            ingredients:
              type: array
              items: { $ref: '#/components/schemas/Ingredient' }
            variants:
              type: array
              items:
                type: object
                properties:
                  id: { type: integer, example: 101 }
                  price: { type: number, format: double, example: 399 }
                  isDefault: { type: boolean, example: true }
                  doughType: { $ref: '#/components/schemas/DoughType' }
                  sizeOption: { $ref: '#/components/schemas/SizeOption' }
    ProductResponse:
      type: object
      properties:
        message: { type: string, example: Produsul a fost creat cu succes }
        data: { $ref: '#/components/schemas/ProductWithRelations' }
    ProductListResponse:
      type: object
      properties:
        message: { type: string, example: Produsele au fost obținute cu succes }
        data:
          type: array
          items: { $ref: '#/components/schemas/ProductWithRelations' }
        count: { type: integer, example: 2 }
    BrowseResponse:
      type: object
      properties:
        message: { type: string }
        data:
          type: array
          items: { $ref: '#/components/schemas/ProductWithRelations' }
        pagination:
          type: object
          properties:
            page: { type: integer, example: 1 }
            limit: { type: integer, example: 12 }
            total: { type: integer, example: 65 }
            totalPages: { type: integer, example: 6 }
paths:
  /cart:
    get:
      summary: Obține coșul curent (necesită autentificare prin cookie)
      tags: [Cart]
      responses:
        '200':
          description: OK
    delete:
      summary: Golește coșul utilizatorului (necesită autentificare prin cookie)
      tags: [Cart]
      responses:
        '204':
          description: Fără conținut
  /cart/items:
    post:
      summary: Adaugă o variantă de produs în coș (necesită autentificare prin cookie)
      tags: [Cart]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productVariantId]
              properties:
                productVariantId: { type: integer }
                quantity: { type: integer, default: 1 }
      responses:
        '201':
          description: Creat
        '400': { description: Date invalide }
        '404': { description: Varianta nu a fost găsită }
  /cart/items/{itemId}:
    patch:
      summary: Actualizează cantitatea unui item din coș (necesită autentificare prin cookie)
      tags: [Cart]
      parameters:
        - in: path
          name: itemId
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity: { type: integer }
      responses:
        '200': { description: OK }
        '400': { description: Cantitate invalidă }
        '404': { description: Item-ul nu a fost găsit }
    delete:
      summary: Elimină un item din coș (necesită autentificare prin cookie)
      tags: [Cart]
      parameters:
        - in: path
          name: itemId
          required: true
          schema: { type: integer }
      responses:
        '204': { description: Fără conținut }
        '404': { description: Item-ul nu a fost găsit }
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthRegisterRequest' }
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400':
          description: Invalid input or account already exists
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/AuthLoginRequest' }
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '400':
          description: Missing credentials / invalid email
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /auth/refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Missing, invalid or expired refresh token
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /auth/me:
    get:
      summary: Returnează utilizatorul autentificat (necesită autentificare prin cookie)
      tags: [Auth]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/AuthResponse' }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /auth/logout:
    post:
      summary: Logout user
      tags: [Auth]
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema: { $ref: '#/components/schemas/LogoutResponse' }
        '500':
          description: Internal server error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /browse/products:
    get:
      summary: Filtrează și sortează produsele
      description: Endpoint principal pentru filtrarea produselor (price sortează după minPrice)
      tags: [Browse]
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Căutare în nume și descriere
        - in: query
          name: categorySlug
          schema: { type: string }
          description: Slug-ul categoriei
          example: pizza-clasice
        - in: query
          name: priceMin
          schema: { type: number }
          description: Preț minim (pe minPrice)
        - in: query
          name: priceMax
          schema: { type: number }
          description: Preț maxim (pe minPrice)
        - in: query
          name: flags
          schema: { type: string }
          description: CSV sau flags[]=a&flags[]=b
          example: spicy,vegetarian
        - in: query
          name: ingredients
          schema: { type: string }
          description: CSV sau ingredients[]=a&ingredients[]=b
          example: mozzarella,tomato
        - in: query
          name: dough
          schema: { type: string }
          description: Tip aluat (cheie)
          example: clasic
        - in: query
          name: size
          schema: { type: string }
          description: Mărime (cheie)
          example: medie
        - in: query
          name: isCustomizable
          schema: { type: boolean }
          description: Doar produse personalizabile
        - in: query
          name: isNew
          schema: { type: boolean }
          description: releasedAt în ultimele `newerThanDays` zile (implicit 30)
        - in: query
          name: newerThanDays
          schema: { type: integer, default: 30 }
        - in: query
          name: sort
          schema:
            type: string
            enum: [price, rating, popularity, newest]
            default: newest
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - in: query
          name: page
          schema: { type: integer, minimum: 1, default: 1 }
      responses:
        '200':
          description: Lista filtrată de produse
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BrowseResponse' }
        '422':
          description: Parametri invalizi
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '500':
          description: Eroare internă a serverului
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /browse/filters:
    get:
      summary: Obține opțiunile de filtrare disponibile
      description: >
        Fără `categorySlug` → **filtre globale**; cu `categorySlug` → **filtre contextuale** (ținând cont de ceilalți parametri).
        Counts sunt calculate în contextul filtrării curente.
      tags: [Browse]
      parameters:
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: categorySlug
          schema: { type: string }
          example: pizza-clasice
        - in: query
          name: priceMin
          schema: { type: number }
        - in: query
          name: priceMax
          schema: { type: number }
        - in: query
          name: flags
          schema: { type: string }
          description: CSV sau flags[]=a&flags[]=b
        - in: query
          name: ingredients
          schema: { type: string }
          description: CSV sau ingredients[]=a&ingredients[]=b
        - in: query
          name: dough
          schema: { type: string }
        - in: query
          name: size
          schema: { type: string }
        - in: query
          name: isCustomizable
          schema: { type: boolean }
        - in: query
          name: isNew
          schema: { type: boolean }
        - in: query
          name: newerThanDays
          schema: { type: integer, default: 30 }
      responses:
        '200':
          description: Opțiunile de filtrare
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
                    properties:
                      flags:
                        type: array
                        items:
                          type: object
                          properties:
                            key: { type: string }
                            label: { type: string }
                            count: { type: integer }
                      ingredients:
                        type: array
                        items:
                          type: object
                          properties:
                            key: { type: string }
                            label: { type: string }
                            count: { type: integer }
                      doughTypes:
                        type: array
                        items:
                          type: object
                          properties:
                            key: { type: string }
                            label: { type: string }
                            count: { type: integer }
                      sizeOptions:
                        type: array
                        items:
                          type: object
                          properties:
                            key: { type: string }
                            label: { type: string }
                            count: { type: integer }
                      price:
                        type: object
                        properties:
                          min: { type: number }
                          max: { type: number }
  /categories:
    get:
      summary: Obține toate categoriile
      tags: [Categories]
      responses:
        '200':
          description: Lista categoriilor
          content:
            application/json:
              schema:
                type: object
                properties:
                  items:
                    type: array
                    items: { $ref: '#/components/schemas/Category' }
        '500':
          description: Eroare internă
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /categories/{slug}:
    get:
      summary: Obține o categorie după slug
      tags: [Categories]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Categoria găsită
          content:
            application/json:
              schema:
                type: object
                properties:
                  data: { $ref: '#/components/schemas/Category' }
        '400': { description: Slug invalid }
        '404': { description: Categoria nu a fost găsită }
  # Eliminat: toate operațiile administrative pe categorii (ID/PUT/DELETE)
  /products:
    get:
      summary: Obține toate produsele (endpoint simplu)
      tags: [Products]
      responses:
        '200':
          description: Lista cu toate produsele
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ProductListResponse' }
        '500':
          description: Eroare internă
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
  /products/facets/{slug}:
    get:
      summary: Obține valorile posibile (facets) pentru filtrele unei categorii (după slug)
      tags: [Products]
      parameters:
        - in: path
          name: slug
          required: true
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: object
        '400': { description: Slug invalid }
        '500': { description: Eroare internă }
  # Eliminat: /products/{id} – detaliu prin ID nu este expus
  # Eliminat: operațiile administrative de produse (POST/PUT/DELETE/stock)
  /taxonomies/ingredients:
    get:
      summary: Listează ingredientele disponibile
      tags: [Taxonomies]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Ingredient' }
  /taxonomies/flags:
    get:
      summary: Listează flagurile disponibile
      tags: [Taxonomies]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/Flag' }
  /taxonomies/dough-types:
    get:
      summary: Listează tipurile de aluat disponibile
      tags: [Taxonomies]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/DoughType' }
  /taxonomies/size-options:
    get:
      summary: Listează opțiunile de mărime disponibile
      tags: [Taxonomies]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
                  data:
                    type: array
                    items: { $ref: '#/components/schemas/SizeOption' }
tags:
  - name: Auth
    description: >
      Operațiuni de autentificare și gestionare utilizatori cu cookie-uri HTTP-Only.
      După /auth/login serverul setează cookie-ul; clientul trebuie să trimită cererile ulterioare cu credentials: 'include'.
  - name: Browse
    description: Filtrare și căutare avansată de produse
  - name: Categories
    description: Gestionarea categoriilor de produse
  - name: Products
    description: Gestionarea produselor (CRUD simplu)
  - name: Taxonomies
    description: Cataloge pentru ingrediente, flaguri și opțiuni de variante
  - name: Cart
    description: Coș de cumpărături per utilizator autentificat

# -- END openapi.clean.yaml --
